/*
 * SPDX-FileCopyrightText: Copyright (c) 2014-2025 Yegor Bugayenko
 * SPDX-License-Identifier: MIT
 */
package org.takes.tk;

import lombok.EqualsAndHashCode;
import lombok.ToString;
import org.takes.Take;
import org.takes.rs.RsWithHeader;

/**
 * Take decorator that adds a single HTTP header to responses.
 *
 * <p>This {@link Take} decorator wraps another take and automatically
 * adds a single specified HTTP header to all responses generated by
 * the wrapped take. It provides a convenient way to add individual
 * headers without the overhead of managing collections of headers.
 *
 * <p>The decorator offers two constructor options for maximum convenience:
 * either separate key and value parameters that are automatically formatted,
 * or a single header string in the standard HTTP format "Name: Value".
 *
 * <p>Example usage:
 * <pre>{@code
 * // Add a single header with separate key/value
 * new TkWithHeader(
 *     new TkText("Hello World"),
 *     "Cache-Control", "no-cache"
 * );
 *
 * // Add a single header as formatted string
 * new TkWithHeader(
 *     new TkHtml("<h1>Page</h1>"),
 *     "X-Frame-Options: SAMEORIGIN"
 * );
 * }</pre>
 *
 * <p>Common use cases include:
 * <ul>
 *   <li>Adding individual security headers to specific endpoints</li>
 *   <li>Setting content-specific cache control headers</li>
 *   <li>Adding custom API headers for single endpoints</li>
 *   <li>Setting CORS headers for specific resources</li>
 *   <li>Adding debug or tracking headers to responses</li>
 *   <li>Setting content disposition for file downloads</li>
 *   <li>Adding versioning headers to API responses</li>
 * </ul>
 *
 * <p>This decorator is more lightweight than {@link TkWithHeaders} when
 * only a single header needs to be added. For multiple headers, consider
 * using {@link TkWithHeaders} instead for better performance and cleaner code.
 *
 * <p>The decorator preserves all aspects of the original response including
 * status code, existing headers, and body content. The new header is added
 * without modifying or removing existing headers from the wrapped take's response.
 *
 * <p>The class is immutable and thread-safe.
 *
 * @since 0.11
 */
@ToString(callSuper = true)
@EqualsAndHashCode(callSuper = true)
public final class TkWithHeader extends TkWrap {

    /**
     * Ctor.
     * @param take Original take to wrap
     * @param key HTTP header name
     * @param value HTTP header value
     */
    public TkWithHeader(final Take take, final String key, final String value) {
        this(take, String.format("%s: %s", key, value));
    }

    /**
     * Ctor.
     * @param take Original take to wrap
     * @param header HTTP header in "Name: Value" format
     */
    public TkWithHeader(final Take take, final String header) {
        super(
            req -> new RsWithHeader(take.act(req), header)
        );
    }

}
