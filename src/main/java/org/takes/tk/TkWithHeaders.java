/*
 * SPDX-FileCopyrightText: Copyright (c) 2014-2025 Yegor Bugayenko
 * SPDX-License-Identifier: MIT
 */
package org.takes.tk;

import java.util.Arrays;
import java.util.Collection;
import lombok.EqualsAndHashCode;
import lombok.ToString;
import org.takes.Take;
import org.takes.rs.RsWithHeaders;

/**
 * Take decorator that adds HTTP headers to responses.
 *
 * <p>This {@link Take} decorator wraps another take and automatically
 * adds specified HTTP headers to all responses generated by the wrapped
 * take. It uses the decorator pattern to enhance responses with additional
 * headers while preserving the original response content and status.
 *
 * <p>The decorator accepts headers in multiple formats for convenience:
 * either as individual string parameters or as a collection of header
 * strings. Headers should follow the standard HTTP format: "Name: Value".
 *
 * <p>Example usage:
 * <pre>{@code
 * // Add security headers to an HTML page
 * new TkWithHeaders(
 *     new TkHtml("<h1>Hello</h1>"),
 *     "X-Frame-Options: DENY",
 *     "X-XSS-Protection: 1; mode=block",
 *     "X-Content-Type-Options: nosniff"
 * );
 * 
 * // Add caching headers to static content
 * new TkWithHeaders(
 *     new TkFiles("/assets"),
 *     Arrays.asList(
 *         "Cache-Control: public, max-age=3600",
 *         "ETag: \"123456\""
 *     )
 * );
 * }</pre>
 *
 * <p>Common use cases include:
 * <ul>
 *   <li>Security headers (CORS, CSP, X-Frame-Options)</li>
 *   <li>Caching and performance headers (Cache-Control, ETag)</li>
 *   <li>API versioning and metadata headers</li>
 *   <li>Cross-origin resource sharing configuration</li>
 *   <li>Content security policy enforcement</li>
 *   <li>Custom application headers for debugging</li>
 *   <li>Server identification and version headers</li>
 * </ul>
 *
 * <p>The decorator preserves all aspects of the original response including
 * status code, existing headers, and body content. New headers are added
 * to the response without modifying or removing existing headers from the
 * wrapped take's response.
 *
 * <p>Header values are added exactly as provided without validation or
 * formatting changes. It's the caller's responsibility to ensure headers
 * follow proper HTTP syntax and semantics.
 *
 * <p>The class is immutable and thread-safe.
 *
 * @since 0.1
 */
@ToString(callSuper = true)
@EqualsAndHashCode(callSuper = true)
public final class TkWithHeaders extends TkWrap {

    /**
     * Ctor.
     * @param take Original take to wrap
     * @param headers HTTP headers to add to responses
     */
    public TkWithHeaders(final Take take, final String... headers) {
        this(take, Arrays.asList(headers));
    }

    /**
     * Ctor.
     * @param take Original take to wrap
     * @param headers Collection of HTTP headers to add to responses
     */
    public TkWithHeaders(final Take take, final Collection<String> headers) {
        super(
            req -> new RsWithHeaders(take.act(req), headers)
        );
    }

}
